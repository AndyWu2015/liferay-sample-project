/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.foo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.foo.model.Foo;
import com.liferay.foo.model.FooModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.NoSuchModelException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ContainerModel;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Foo service. Represents a row in the &quot;Foo_Foo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link FooModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FooImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FooImpl
 * @see Foo
 * @see FooModel
 * @generated
 */
@ProviderType
public class FooModelImpl extends BaseModelImpl<Foo> implements FooModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a foo model instance should use the {@link Foo} interface instead.
	 */
	public static final String TABLE_NAME = "Foo_Foo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "fooId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "fooBooleanStat", Types.BOOLEAN },
			{ "fooDateTime", Types.TIMESTAMP },
			{ "fooDocumentLibrary", Types.VARCHAR },
			{ "fooDouble", Types.DOUBLE },
			{ "fooInteger", Types.INTEGER },
			{ "fooRichText", Types.VARCHAR },
			{ "fooText", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "urlTitle", Types.VARCHAR },
			{ "fooTitleName", Types.VARCHAR },
			{ "fooSummaryName", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fooId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fooBooleanStat", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("fooDateTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fooDocumentLibrary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fooDouble", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("fooInteger", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("fooRichText", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fooText", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("urlTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fooTitleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fooSummaryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table Foo_Foo (uuid_ VARCHAR(75) null,fooId LONG not null primary key,title VARCHAR(80) null,fooBooleanStat BOOLEAN,fooDateTime DATE null,fooDocumentLibrary VARCHAR(512) null,fooDouble DOUBLE,fooInteger INTEGER,fooRichText TEXT null,fooText TEXT null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,urlTitle VARCHAR(75) null,fooTitleName VARCHAR(255) null,fooSummaryName TEXT null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Foo_Foo";
	public static final String ORDER_BY_JPQL = " ORDER BY foo.fooId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Foo_Foo.fooId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.foo.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.foo.model.Foo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.foo.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.foo.model.Foo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.foo.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.foo.model.Foo"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long FOOBOOLEANSTAT_COLUMN_BITMASK = 2L;
	public static final long FOODATETIME_COLUMN_BITMASK = 4L;
	public static final long FOODOCUMENTLIBRARY_COLUMN_BITMASK = 8L;
	public static final long FOODOUBLE_COLUMN_BITMASK = 16L;
	public static final long FOOID_COLUMN_BITMASK = 32L;
	public static final long FOOINTEGER_COLUMN_BITMASK = 64L;
	public static final long FOORICHTEXT_COLUMN_BITMASK = 128L;
	public static final long FOOTEXT_COLUMN_BITMASK = 256L;
	public static final long GROUPID_COLUMN_BITMASK = 512L;
	public static final long STATUS_COLUMN_BITMASK = 1024L;
	public static final long TITLE_COLUMN_BITMASK = 2048L;
	public static final long URLTITLE_COLUMN_BITMASK = 4096L;
	public static final long USERID_COLUMN_BITMASK = 8192L;
	public static final long UUID_COLUMN_BITMASK = 16384L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.foo.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.foo.model.Foo"));

	public FooModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fooId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFooId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fooId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Foo.class;
	}

	@Override
	public String getModelClassName() {
		return Foo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("fooId", getFooId());
		attributes.put("title", getTitle());
		attributes.put("fooBooleanStat", getFooBooleanStat());
		attributes.put("fooDateTime", getFooDateTime());
		attributes.put("fooDocumentLibrary", getFooDocumentLibrary());
		attributes.put("fooDouble", getFooDouble());
		attributes.put("fooInteger", getFooInteger());
		attributes.put("fooRichText", getFooRichText());
		attributes.put("fooText", getFooText());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("urlTitle", getUrlTitle());
		attributes.put("fooTitleName", getFooTitleName());
		attributes.put("fooSummaryName", getFooSummaryName());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long fooId = (Long)attributes.get("fooId");

		if (fooId != null) {
			setFooId(fooId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Boolean fooBooleanStat = (Boolean)attributes.get("fooBooleanStat");

		if (fooBooleanStat != null) {
			setFooBooleanStat(fooBooleanStat);
		}

		Date fooDateTime = (Date)attributes.get("fooDateTime");

		if (fooDateTime != null) {
			setFooDateTime(fooDateTime);
		}

		String fooDocumentLibrary = (String)attributes.get("fooDocumentLibrary");

		if (fooDocumentLibrary != null) {
			setFooDocumentLibrary(fooDocumentLibrary);
		}

		Double fooDouble = (Double)attributes.get("fooDouble");

		if (fooDouble != null) {
			setFooDouble(fooDouble);
		}

		Integer fooInteger = (Integer)attributes.get("fooInteger");

		if (fooInteger != null) {
			setFooInteger(fooInteger);
		}

		String fooRichText = (String)attributes.get("fooRichText");

		if (fooRichText != null) {
			setFooRichText(fooRichText);
		}

		String fooText = (String)attributes.get("fooText");

		if (fooText != null) {
			setFooText(fooText);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String urlTitle = (String)attributes.get("urlTitle");

		if (urlTitle != null) {
			setUrlTitle(urlTitle);
		}

		String fooTitleName = (String)attributes.get("fooTitleName");

		if (fooTitleName != null) {
			setFooTitleName(fooTitleName);
		}

		String fooSummaryName = (String)attributes.get("fooSummaryName");

		if (fooSummaryName != null) {
			setFooSummaryName(fooSummaryName);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getFooId() {
		return _fooId;
	}

	@Override
	public void setFooId(long fooId) {
		_columnBitmask |= FOOID_COLUMN_BITMASK;

		if (!_setOriginalFooId) {
			_setOriginalFooId = true;

			_originalFooId = _fooId;
		}

		_fooId = fooId;
	}

	public long getOriginalFooId() {
		return _originalFooId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@Override
	public boolean getFooBooleanStat() {
		return _fooBooleanStat;
	}

	@Override
	public boolean isFooBooleanStat() {
		return _fooBooleanStat;
	}

	@Override
	public void setFooBooleanStat(boolean fooBooleanStat) {
		_columnBitmask |= FOOBOOLEANSTAT_COLUMN_BITMASK;

		if (!_setOriginalFooBooleanStat) {
			_setOriginalFooBooleanStat = true;

			_originalFooBooleanStat = _fooBooleanStat;
		}

		_fooBooleanStat = fooBooleanStat;
	}

	public boolean getOriginalFooBooleanStat() {
		return _originalFooBooleanStat;
	}

	@Override
	public Date getFooDateTime() {
		return _fooDateTime;
	}

	@Override
	public void setFooDateTime(Date fooDateTime) {
		_columnBitmask |= FOODATETIME_COLUMN_BITMASK;

		if (_originalFooDateTime == null) {
			_originalFooDateTime = _fooDateTime;
		}

		_fooDateTime = fooDateTime;
	}

	public Date getOriginalFooDateTime() {
		return _originalFooDateTime;
	}

	@Override
	public String getFooDocumentLibrary() {
		if (_fooDocumentLibrary == null) {
			return StringPool.BLANK;
		}
		else {
			return _fooDocumentLibrary;
		}
	}

	@Override
	public void setFooDocumentLibrary(String fooDocumentLibrary) {
		_columnBitmask |= FOODOCUMENTLIBRARY_COLUMN_BITMASK;

		if (_originalFooDocumentLibrary == null) {
			_originalFooDocumentLibrary = _fooDocumentLibrary;
		}

		_fooDocumentLibrary = fooDocumentLibrary;
	}

	public String getOriginalFooDocumentLibrary() {
		return GetterUtil.getString(_originalFooDocumentLibrary);
	}

	@Override
	public double getFooDouble() {
		return _fooDouble;
	}

	@Override
	public void setFooDouble(double fooDouble) {
		_columnBitmask |= FOODOUBLE_COLUMN_BITMASK;

		if (!_setOriginalFooDouble) {
			_setOriginalFooDouble = true;

			_originalFooDouble = _fooDouble;
		}

		_fooDouble = fooDouble;
	}

	public double getOriginalFooDouble() {
		return _originalFooDouble;
	}

	@Override
	public int getFooInteger() {
		return _fooInteger;
	}

	@Override
	public void setFooInteger(int fooInteger) {
		_columnBitmask |= FOOINTEGER_COLUMN_BITMASK;

		if (!_setOriginalFooInteger) {
			_setOriginalFooInteger = true;

			_originalFooInteger = _fooInteger;
		}

		_fooInteger = fooInteger;
	}

	public int getOriginalFooInteger() {
		return _originalFooInteger;
	}

	@Override
	public String getFooRichText() {
		if (_fooRichText == null) {
			return StringPool.BLANK;
		}
		else {
			return _fooRichText;
		}
	}

	@Override
	public void setFooRichText(String fooRichText) {
		_columnBitmask |= FOORICHTEXT_COLUMN_BITMASK;

		if (_originalFooRichText == null) {
			_originalFooRichText = _fooRichText;
		}

		_fooRichText = fooRichText;
	}

	public String getOriginalFooRichText() {
		return GetterUtil.getString(_originalFooRichText);
	}

	@Override
	public String getFooText() {
		if (_fooText == null) {
			return StringPool.BLANK;
		}
		else {
			return _fooText;
		}
	}

	@Override
	public void setFooText(String fooText) {
		_columnBitmask |= FOOTEXT_COLUMN_BITMASK;

		if (_originalFooText == null) {
			_originalFooText = _fooText;
		}

		_fooText = fooText;
	}

	public String getOriginalFooText() {
		return GetterUtil.getString(_originalFooText);
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getUrlTitle() {
		if (_urlTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _urlTitle;
		}
	}

	@Override
	public void setUrlTitle(String urlTitle) {
		_columnBitmask |= URLTITLE_COLUMN_BITMASK;

		if (_originalUrlTitle == null) {
			_originalUrlTitle = _urlTitle;
		}

		_urlTitle = urlTitle;
	}

	public String getOriginalUrlTitle() {
		return GetterUtil.getString(_originalUrlTitle);
	}

	@Override
	public String getFooTitleName() {
		if (_fooTitleName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fooTitleName;
		}
	}

	@Override
	public void setFooTitleName(String fooTitleName) {
		_fooTitleName = fooTitleName;
	}

	@Override
	public String getFooSummaryName() {
		if (_fooSummaryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fooSummaryName;
		}
	}

	@Override
	public void setFooSummaryName(String fooSummaryName) {
		_fooSummaryName = fooSummaryName;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Foo.class.getName()));
	}

	@Override
	public com.liferay.trash.kernel.model.TrashEntry getTrashEntry()
		throws PortalException {
		if (!isInTrash()) {
			return null;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry = com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
				getTrashEntryClassPK());

		if (trashEntry != null) {
			return trashEntry;
		}

		com.liferay.portal.kernel.trash.TrashHandler trashHandler = getTrashHandler();

		if (!Validator.isNull(trashHandler.getContainerModelClassName(
						getPrimaryKey()))) {
			ContainerModel containerModel = null;

			try {
				containerModel = trashHandler.getParentContainerModel(this);
			}
			catch (NoSuchModelException nsme) {
				return null;
			}

			while (containerModel != null) {
				if (containerModel instanceof TrashedModel) {
					TrashedModel trashedModel = (TrashedModel)containerModel;

					return trashedModel.getTrashEntry();
				}

				trashHandler = com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.getTrashHandler(trashHandler.getContainerModelClassName(
							containerModel.getContainerModelId()));

				if (trashHandler == null) {
					return null;
				}

				containerModel = trashHandler.getContainerModel(containerModel.getParentContainerModelId());
			}
		}

		return null;
	}

	@Override
	public long getTrashEntryClassPK() {
		return getPrimaryKey();
	}

	/**
	* @deprecated As of 7.0.0, with no direct replacement
	*/
	@Deprecated
	@Override
	public com.liferay.portal.kernel.trash.TrashHandler getTrashHandler() {
		return com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.getTrashHandler(getModelClassName());
	}

	@Override
	public boolean isInTrash() {
		if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInTrashContainer() {
		com.liferay.portal.kernel.trash.TrashHandler trashHandler = getTrashHandler();

		if ((trashHandler == null) ||
				Validator.isNull(trashHandler.getContainerModelClassName(
						getPrimaryKey()))) {
			return false;
		}

		try {
			ContainerModel containerModel = trashHandler.getParentContainerModel(this);

			if (containerModel == null) {
				return false;
			}

			if (containerModel instanceof TrashedModel) {
				return ((TrashedModel)containerModel).isInTrash();
			}
		}
		catch (Exception e) {
		}

		return false;
	}

	@Override
	public boolean isInTrashExplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry = com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
				getTrashEntryClassPK());

		if (trashEntry != null) {
			return true;
		}

		return false;
	}

	@Override
	public boolean isInTrashImplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry = com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.fetchEntry(getModelClassName(),
				getTrashEntryClassPK());

		if (trashEntry != null) {
			return false;
		}

		return true;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Foo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Foo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Foo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FooImpl fooImpl = new FooImpl();

		fooImpl.setUuid(getUuid());
		fooImpl.setFooId(getFooId());
		fooImpl.setTitle(getTitle());
		fooImpl.setFooBooleanStat(getFooBooleanStat());
		fooImpl.setFooDateTime(getFooDateTime());
		fooImpl.setFooDocumentLibrary(getFooDocumentLibrary());
		fooImpl.setFooDouble(getFooDouble());
		fooImpl.setFooInteger(getFooInteger());
		fooImpl.setFooRichText(getFooRichText());
		fooImpl.setFooText(getFooText());
		fooImpl.setGroupId(getGroupId());
		fooImpl.setCompanyId(getCompanyId());
		fooImpl.setUserId(getUserId());
		fooImpl.setUserName(getUserName());
		fooImpl.setCreateDate(getCreateDate());
		fooImpl.setModifiedDate(getModifiedDate());
		fooImpl.setUrlTitle(getUrlTitle());
		fooImpl.setFooTitleName(getFooTitleName());
		fooImpl.setFooSummaryName(getFooSummaryName());
		fooImpl.setStatus(getStatus());
		fooImpl.setStatusByUserId(getStatusByUserId());
		fooImpl.setStatusByUserName(getStatusByUserName());
		fooImpl.setStatusDate(getStatusDate());

		fooImpl.resetOriginalValues();

		return fooImpl;
	}

	@Override
	public int compareTo(Foo foo) {
		long primaryKey = foo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Foo)) {
			return false;
		}

		Foo foo = (Foo)obj;

		long primaryKey = foo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		FooModelImpl fooModelImpl = this;

		fooModelImpl._originalUuid = fooModelImpl._uuid;

		fooModelImpl._originalFooId = fooModelImpl._fooId;

		fooModelImpl._setOriginalFooId = false;

		fooModelImpl._originalTitle = fooModelImpl._title;

		fooModelImpl._originalFooBooleanStat = fooModelImpl._fooBooleanStat;

		fooModelImpl._setOriginalFooBooleanStat = false;

		fooModelImpl._originalFooDateTime = fooModelImpl._fooDateTime;

		fooModelImpl._originalFooDocumentLibrary = fooModelImpl._fooDocumentLibrary;

		fooModelImpl._originalFooDouble = fooModelImpl._fooDouble;

		fooModelImpl._setOriginalFooDouble = false;

		fooModelImpl._originalFooInteger = fooModelImpl._fooInteger;

		fooModelImpl._setOriginalFooInteger = false;

		fooModelImpl._originalFooRichText = fooModelImpl._fooRichText;

		fooModelImpl._originalFooText = fooModelImpl._fooText;

		fooModelImpl._originalGroupId = fooModelImpl._groupId;

		fooModelImpl._setOriginalGroupId = false;

		fooModelImpl._originalCompanyId = fooModelImpl._companyId;

		fooModelImpl._setOriginalCompanyId = false;

		fooModelImpl._originalUserId = fooModelImpl._userId;

		fooModelImpl._setOriginalUserId = false;

		fooModelImpl._setModifiedDate = false;

		fooModelImpl._originalUrlTitle = fooModelImpl._urlTitle;

		fooModelImpl._originalStatus = fooModelImpl._status;

		fooModelImpl._setOriginalStatus = false;

		fooModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Foo> toCacheModel() {
		FooCacheModel fooCacheModel = new FooCacheModel();

		fooCacheModel.uuid = getUuid();

		String uuid = fooCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			fooCacheModel.uuid = null;
		}

		fooCacheModel.fooId = getFooId();

		fooCacheModel.title = getTitle();

		String title = fooCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			fooCacheModel.title = null;
		}

		fooCacheModel.fooBooleanStat = getFooBooleanStat();

		Date fooDateTime = getFooDateTime();

		if (fooDateTime != null) {
			fooCacheModel.fooDateTime = fooDateTime.getTime();
		}
		else {
			fooCacheModel.fooDateTime = Long.MIN_VALUE;
		}

		fooCacheModel.fooDocumentLibrary = getFooDocumentLibrary();

		String fooDocumentLibrary = fooCacheModel.fooDocumentLibrary;

		if ((fooDocumentLibrary != null) && (fooDocumentLibrary.length() == 0)) {
			fooCacheModel.fooDocumentLibrary = null;
		}

		fooCacheModel.fooDouble = getFooDouble();

		fooCacheModel.fooInteger = getFooInteger();

		fooCacheModel.fooRichText = getFooRichText();

		String fooRichText = fooCacheModel.fooRichText;

		if ((fooRichText != null) && (fooRichText.length() == 0)) {
			fooCacheModel.fooRichText = null;
		}

		fooCacheModel.fooText = getFooText();

		String fooText = fooCacheModel.fooText;

		if ((fooText != null) && (fooText.length() == 0)) {
			fooCacheModel.fooText = null;
		}

		fooCacheModel.groupId = getGroupId();

		fooCacheModel.companyId = getCompanyId();

		fooCacheModel.userId = getUserId();

		fooCacheModel.userName = getUserName();

		String userName = fooCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			fooCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			fooCacheModel.createDate = createDate.getTime();
		}
		else {
			fooCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			fooCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			fooCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		fooCacheModel.urlTitle = getUrlTitle();

		String urlTitle = fooCacheModel.urlTitle;

		if ((urlTitle != null) && (urlTitle.length() == 0)) {
			fooCacheModel.urlTitle = null;
		}

		fooCacheModel.fooTitleName = getFooTitleName();

		String fooTitleName = fooCacheModel.fooTitleName;

		if ((fooTitleName != null) && (fooTitleName.length() == 0)) {
			fooCacheModel.fooTitleName = null;
		}

		fooCacheModel.fooSummaryName = getFooSummaryName();

		String fooSummaryName = fooCacheModel.fooSummaryName;

		if ((fooSummaryName != null) && (fooSummaryName.length() == 0)) {
			fooCacheModel.fooSummaryName = null;
		}

		fooCacheModel.status = getStatus();

		fooCacheModel.statusByUserId = getStatusByUserId();

		fooCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = fooCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			fooCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			fooCacheModel.statusDate = statusDate.getTime();
		}
		else {
			fooCacheModel.statusDate = Long.MIN_VALUE;
		}

		return fooCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(47);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", fooId=");
		sb.append(getFooId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", fooBooleanStat=");
		sb.append(getFooBooleanStat());
		sb.append(", fooDateTime=");
		sb.append(getFooDateTime());
		sb.append(", fooDocumentLibrary=");
		sb.append(getFooDocumentLibrary());
		sb.append(", fooDouble=");
		sb.append(getFooDouble());
		sb.append(", fooInteger=");
		sb.append(getFooInteger());
		sb.append(", fooRichText=");
		sb.append(getFooRichText());
		sb.append(", fooText=");
		sb.append(getFooText());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", urlTitle=");
		sb.append(getUrlTitle());
		sb.append(", fooTitleName=");
		sb.append(getFooTitleName());
		sb.append(", fooSummaryName=");
		sb.append(getFooSummaryName());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(73);

		sb.append("<model><model-name>");
		sb.append("com.liferay.foo.model.Foo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fooId</column-name><column-value><![CDATA[");
		sb.append(getFooId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fooBooleanStat</column-name><column-value><![CDATA[");
		sb.append(getFooBooleanStat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fooDateTime</column-name><column-value><![CDATA[");
		sb.append(getFooDateTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fooDocumentLibrary</column-name><column-value><![CDATA[");
		sb.append(getFooDocumentLibrary());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fooDouble</column-name><column-value><![CDATA[");
		sb.append(getFooDouble());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fooInteger</column-name><column-value><![CDATA[");
		sb.append(getFooInteger());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fooRichText</column-name><column-value><![CDATA[");
		sb.append(getFooRichText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fooText</column-name><column-value><![CDATA[");
		sb.append(getFooText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>urlTitle</column-name><column-value><![CDATA[");
		sb.append(getUrlTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fooTitleName</column-name><column-value><![CDATA[");
		sb.append(getFooTitleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fooSummaryName</column-name><column-value><![CDATA[");
		sb.append(getFooSummaryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Foo.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Foo.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _fooId;
	private long _originalFooId;
	private boolean _setOriginalFooId;
	private String _title;
	private String _originalTitle;
	private boolean _fooBooleanStat;
	private boolean _originalFooBooleanStat;
	private boolean _setOriginalFooBooleanStat;
	private Date _fooDateTime;
	private Date _originalFooDateTime;
	private String _fooDocumentLibrary;
	private String _originalFooDocumentLibrary;
	private double _fooDouble;
	private double _originalFooDouble;
	private boolean _setOriginalFooDouble;
	private int _fooInteger;
	private int _originalFooInteger;
	private boolean _setOriginalFooInteger;
	private String _fooRichText;
	private String _originalFooRichText;
	private String _fooText;
	private String _originalFooText;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _urlTitle;
	private String _originalUrlTitle;
	private String _fooTitleName;
	private String _fooSummaryName;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private Foo _escapedModel;
}